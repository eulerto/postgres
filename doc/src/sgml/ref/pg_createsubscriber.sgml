<!--
doc/src/sgml/ref/pg_createsubscriber.sgml
PostgreSQL documentation
-->

<refentry id="app-pgcreatesubscriber">
 <indexterm zone="app-pgcreatesubscriber">
  <primary>pg_createsubscriber</primary>
 </indexterm>

 <refmeta>
  <refentrytitle><application>pg_createsubscriber</application></refentrytitle>
  <manvolnum>1</manvolnum>
  <refmiscinfo>Application</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>pg_createsubscriber</refname>
  <refpurpose>convert a physical replica into a new logical replica</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <cmdsynopsis>
   <command>pg_createsubscriber</command>
   <arg rep="repeat"><replaceable>option</replaceable></arg>
   <group choice="plain">
    <group choice="req">
     <arg choice="plain"><option>-d</option></arg>
     <arg choice="plain"><option>--database</option></arg>
    </group>
    <replaceable>dbname</replaceable>
    <group choice="req">
     <arg choice="plain"><option>-D</option> </arg>
     <arg choice="plain"><option>--pgdata</option></arg>
    </group>
    <replaceable>datadir</replaceable>
    <group choice="req">
     <arg choice="plain"><option>-P</option></arg>
     <arg choice="plain"><option>--publisher-server</option></arg>
    </group>
    <replaceable>connstr</replaceable>
   </group>
  </cmdsynopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>
  <para>
    <application>pg_createsubscriber</application> creates a new logical
    replica from a physical standby server. It must be run at the target server.
  </para>

  <para>
   The <application>pg_createsubscriber</application> targets large database
   systems because it speeds up the logical replication setup. For smaller
   databases, <link linkend="logical-replication">initial data synchronization</link>
   is recommended.
  </para>

  <para>
   There are some prerequisites for <application>pg_createsubscriber</application>
   to convert the target server into a logical replica. If these are not met an
   error will be reported.
  </para>

  <itemizedlist id="app-pg-createsubscriber-description-prerequisites">
   <listitem>
    <para>
     The source and target servers must have the same major version as the
     <application>pg_createsubscriber</application>.
    </para>
   </listitem>

   <listitem>
    <para>
     The given target data directory must have the same system identifier than
     the source data directory. If a standby server is running on the target
     data directory or it is a base backup from the source data directory,
     system identifiers are the same.
    </para>
   </listitem>

   <listitem>
    <para>
     The target server must be used as a physical standby.
    </para>
   </listitem>

   <listitem>
    <para>
     The given database user for the target data directory must have privileges
     for creating <link linkend="sql-createsubscription">subscriptions</link>
     and using <link linkend="pg-replication-origin-advance"><function>pg_replication_origin_advance()</function></link>.
    </para>
   </listitem>

   <listitem>
    <para>
     The target server must have
     <link linkend="guc-max-replication-slots"><varname>max_replication_slots</varname></link>
     and
     <link linkend="guc-max-logical-replication-workers"><varname>max_logical_replication_workers</varname></link>
     configured to a value greater than or equal to the number of specified databases.
    </para>
   </listitem>

   <listitem>
    <para>
     The target server must have
     <link linkend="guc-max-worker-processes"><varname>max_worker_processes</varname></link>
     configured to a value greater than the number of specified databases.
    </para>
   </listitem>

   <listitem>
    <para>
     The target server must accept local connections.
    </para>
   </listitem>

   <listitem>
    <para>
     The source server must accept connections from the target server.
    </para>
   </listitem>

   <listitem>
    <para>
     The source server must not be in recovery. Publications cannot be created
     in a read-only cluster.
    </para>
   </listitem>

   <listitem>
    <para>
     The source server must have
     <link linkend="guc-wal-level"><varname>wal_level</varname></link> as
     <literal>logical</literal>.
    </para>
   </listitem>

   <listitem>
    <para>
     The source server must have
     <link linkend="guc-max-replication-slots"><varname>max_replication_slots</varname></link>
     configured to a value greater than the number of specified databases plus
     existing replication slots.
    </para>
   </listitem>

   <listitem>
    <para>
     The source server must have
     <link linkend="guc-max-wal-senders"><varname>max_wal_senders</varname></link>
     configured to a value greater than or equal to the number of specified
     databases and existing <literal>walsender</literal> processes.
    </para>
   </listitem>
  </itemizedlist>

  <warning>
   <title>Warning</title>
   <para>
    If <application>pg_createsubscriber</application> fails while processing,
    then the data directory is likely not in a state that can be recovered. It
    is true if the target server was promoted. In such a case, creating a new
    standby server is recommended.
   </para>

   <para>
    <application>pg_createsubscriber</application> usually starts the target
    server with different connection settings during the transformation steps.
    Hence, connections to target server might fail.
   </para>

   <para>
    During the recovery process, if the target server disconnects from the
    source server, <application>pg_createsubscriber</application> will check
    a few times if the connection has been reestablished to stream the required
    WAL. After a few attempts, it terminates with an error.
   </para>

   <para>
    Executing DDL commands on the source server while running
    <application>pg_createsubscriber</application> is not recommended. If the
    target server has already been converted to logical replica, the DDL
    commands must not be replicated so an error would occur.
   </para>

   <para>
    If <application>pg_createsubscriber</application> fails while processing,
    objects (publications, replication slots) created on the source server
    should be removed. The removal might fail if the target server cannot
    connect to the source server. In such a case, a warning message will inform
    the objects left.
   </para>

   <para>
    If the replication is using a
    <link linkend="guc-primary-slot-name"><varname>primary_slot_name</varname></link>,
    it will be removed from the source server after the logical replication setup.
   </para>

   <para>
    <application>pg_createsubscriber</application> changes the system identifier
    using <application>pg_resetwal</application>. It would avoid situations in
    which WAL files from the source server might be used by the target server.
    If the target server has a standby, replication will break and a fresh
    standby should be created.
   </para>
  </warning>

 </refsect1>

 <refsect1>
  <title>Options</title>

   <para>
    <application>pg_createsubscriber</application> accepts the following
    command-line arguments:

    <variablelist>
     <varlistentry>
      <term><option>-d <replaceable class="parameter">dbname</replaceable></option></term>
      <term><option>--database=<replaceable class="parameter">dbname</replaceable></option></term>
      <listitem>
       <para>
        The database name to create the subscription. Multiple databases can be
        selected by writing multiple <option>-d</option> switches.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-D <replaceable class="parameter">directory</replaceable></option></term>
      <term><option>--pgdata=<replaceable class="parameter">directory</replaceable></option></term>
      <listitem>
       <para>
        The target directory that contains a cluster directory from a physical
        replica.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-n</option></term>
      <term><option>--dry-run</option></term>
      <listitem>
       <para>
        Do everything except actually modifying the target directory.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-p <replaceable class="parameter">port</replaceable></option></term>
      <term><option>--subscriber-port=<replaceable class="parameter">port</replaceable></option></term>
      <listitem>
       <para>
        The port number on which the target server is listening for connections.
        Defaults to running the target server on port 50432 to avoid unintended
        client connections.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-P <replaceable class="parameter">connstr</replaceable></option></term>
      <term><option>--publisher-server=<replaceable class="parameter">connstr</replaceable></option></term>
      <listitem>
       <para>
        The connection string to the publisher. For details see <xref linkend="libpq-connstring"/>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-r</option></term>
      <term><option>--retain</option></term>
      <listitem>
       <para>
        Retain log file even after successful completion.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-s <replaceable class="parameter">dir</replaceable></option></term>
      <term><option>--socket-directory=<replaceable class="parameter">dir</replaceable></option></term>
      <listitem>
       <para>
        The directory to use for postmaster sockets on target server. The
        default is current directory.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
       <term><option>-t <replaceable class="parameter">seconds</replaceable></option></term>
       <term><option>--recovery-timeout=<replaceable class="parameter">seconds</replaceable></option></term>
       <listitem>
       <para>
        The maximum number of seconds to wait for recovery to end. Setting to 0
        disables. The default is 0.
       </para>
       </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-U <replaceable class="parameter">username</replaceable></option></term>
      <term><option>--subscriber-username=<replaceable class="parameter">username</replaceable></option></term>
      <listitem>
       <para>
        The username to connect as on target server. Defaults to the current
        operating system user name.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-v</option></term>
      <term><option>--verbose</option></term>
      <listitem>
       <para>
        Enables verbose mode. This will cause
        <application>pg_createsubscriber</application> to output progress messages
        and detailed information about each step to standard error.
        Repeating the option causes additional debug-level messages to appear on
        standard error.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>

   <para>
    Other options are also available:

    <variablelist>
     <varlistentry>
       <term><option>-?</option></term>
       <term><option>--help</option></term>
       <listitem>
       <para>
       Show help about <application>pg_createsubscriber</application> command
       line arguments, and exit.
       </para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term><option>-V</option></term>
       <term><option>--version</option></term>
       <listitem>
       <para>
       Print the <application>pg_createsubscriber</application> version and exit.
       </para>
       </listitem>
     </varlistentry>

    </variablelist>
   </para>

 </refsect1>

 <refsect1>
  <title>How It Works</title>

  <para>
    The basic idea is to have a replication start point from the source server
    and set up a logical replication to start from this point:
  </para>

  <procedure>
   <step>
    <para>
     Start the target server with the specified command-line options. If the
     target server is already running, stop it because some parameters can only
     be set at server start.
    </para>
   </step>

   <step>
    <para>
     Check if the target server can be converted. There are also a few checks
     on the source server. All
     <link linkend="app-pg-createsubscriber-description-prerequisites">prerequisites</link>
     are checked. If any of them are not met, <application>pg_createsubscriber</application>
     will terminate with an error.
    </para>
   </step>

   <step>
    <para>
     Create a publication and replication slot for each specified database on
     the source server. Each publication has the following name pattern:
     <quote><literal>pg_createsubscriber_%u</literal></quote> (parameter:
     database <parameter>oid</parameter>). Each replication slot has the
     following name pattern:
     <quote><literal>pg_createsubscriber_%u_%d</literal></quote> (parameters:
     database <parameter>oid</parameter>, PID <parameter>int</parameter>).
     These replication slots will be used by the subscriptions in a future step.
    </para>
   </step>

   <step>
    <para>
     Create a temporary replication slot to get a consistent start location.
     This replication slot has the following name pattern:
     <quote><literal>pg_createsubscriber_%d_startpoint</literal></quote>
     (parameter: PID <parameter>int</parameter>). The LSN returned by
     <link linkend="pg-create-logical-replication-slot"><function>pg_create_logical_replication_slot()</function></link>
     is used as a stopping point in the <xref linkend="guc-recovery-target-lsn"/>
     parameter and by the subscriptions as a replication start point. It
     guarantees that no transaction will be lost.
    </para>
   </step>

   <step>
    <para>
     Write recovery parameters into the target data directory and restart the
     target server. It specifies a LSN (<xref linkend="guc-recovery-target-lsn"/>)
     of write-ahead log location up to which recovery will proceed. It also
     specifies <literal>promote</literal> as the action that the server should
     take once the recovery target is reached. Additional
     <link linkend="runtime-config-wal-recovery-target">recovery parameters</link>
     are also added so it avoids unexpected behavior during the recovery
     process such as end of the recovery as soon as a consistent state is
     reached (WAL should be applied until the consistent start location) and
     multiple recovery targets that can cause a failure. This step finishes
     once the server ends standby mode and is accepting read-write transactions.
     If <option>--recovery-timeout</option> option is set,
     <application>pg_createsubscriber</application> terminates if recovery does
     not end until the given number of seconds.
    </para>
   </step>

   <step>
    <para>
     Create a subscription for each specified database on the target server.
     The subscription has the following name pattern:
     <quote><literal>pg_createsubscriber_%u_%d</literal></quote> (parameters:
     database <parameter>oid</parameter>, PID <parameter>int</parameter>). The
     replication slot name is identical to the subscription name. It does not
     copy existing data from the source server. It does not create a
     replication slot. Instead, it uses the replication slot that was created
     in a previous step. The subscription is created but it is not enabled yet.
     The reason is the replication progress must be set to the consistent LSN
     but replication origin name contains the subscription oid in its name.
     Hence, the subscription will be enabled in a separate step.
    </para>
   </step>

   <step>
    <para>
     Drop publications on the target server that were replicated because they
     were created before the consistent start location. It has no use on the
     subscriber.
    </para>
   </step>

   <step>
    <para>
     Set the replication progress to the consistent start point for each
     subscription. When the target server starts the recovery process, it
     catches up to the consistent start point. This is the exact LSN to be used
     as a initial location for each subscription. The replication origin name
     is obtained since the subscription was created. The replication origin
     name and the consistent start point are used in
     <link linkend="pg-replication-origin-advance"><function>pg_replication_origin_advance()</function></link>
     to set up the initial replication location.
    </para>
   </step>

   <step>
    <para>
     Enable the subscription for each specified database on the target server.
     The subscription starts applying transactions from the consistent start
     point.
    </para>
   </step>

   <step>
    <para>
     If the standby server was using
     <link linkend="guc-primary-slot-name"><varname>primary_slot_name</varname></link>,
     it has no use from now on so drop it.
    </para>
   </step>

   <step>
    <para>
     Update the system identifier on the target server. The
     <xref linkend="app-pgresetwal"/> is run to modify the system identifier.
     The target server is stopped as a <command>pg_resetwal</command> requirement.
    </para>
   </step>
  </procedure>
 </refsect1>

 <refsect1>
  <title>Examples</title>

  <para>
   To create a logical replica for databases <literal>hr</literal> and
   <literal>finance</literal> from a physical replica at <literal>foo</literal>:
<screen>
<prompt>$</prompt> <userinput>pg_createsubscriber -D /usr/local/pgsql/data -P "host=foo" -d hr -d finance</userinput>
</screen>
  </para>

 </refsect1>

 <refsect1>
  <title>See Also</title>

  <simplelist type="inline">
   <member><xref linkend="app-pgbasebackup"/></member>
  </simplelist>
 </refsect1>

</refentry>
